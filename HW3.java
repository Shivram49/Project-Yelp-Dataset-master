package JavaAccess;

//import com.javafx.stage.WindowHelper;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lizilina
 */
public class HW3 extends javax.swing.JFrame {

    public static final String DBURL = "jdbc:oracle:thin:@localhost:1521:xe";
    public static final String DBUSER = "system";
    public static final String DBPASS = "oracle";
    public static String the_sql_query = "";
    public static boolean trigger_call = true;
    ArrayList<String> selected_categories = new ArrayList<String>();
    ArrayList<String> selected_sub_categories = new ArrayList<String>();
    ArrayList<String> selected_attributes = new ArrayList<String>();
    ArrayList<String> all_bids = new ArrayList<String>();

    /**
     * Creates new form NewJFrame
     */
    public HW3() {
        initComponents();
        initmore();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        //initializing the components
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        //initialize for search for
        jSearchFor = new javax.swing.JComboBox<>();
        jSearchForLabel = new javax.swing.JLabel();//initialize jSearchForLabel
        //initialize user fields
        jMemberSince = new javax.swing.JLabel();
        jMemberSinceCombo = new javax.swing.JComboBox();
        jMemberSinceText = new javax.swing.JTextField ();
        jReviewCount = new javax.swing.JLabel();
        jReviewCountCombo = new javax.swing.JComboBox();
        jReviewCountText = new javax.swing.JTextField();
        jNumberOfFriends = new javax.swing.JLabel();
        jNumberOfFriendsCombo = new javax.swing.JComboBox();
        jNumberOfFriendsText = new javax.swing.JTextField();
        jAverageStars = new javax.swing.JLabel();
        jAverageStarsCombo = new javax.swing.JComboBox();
        jAverageStarsText = new javax.swing.JTextField();
        jVoteFunny = new javax.swing.JLabel();
        jVoteFunnyCombo = new javax.swing.JComboBox();
        jVoteFunnyText = new javax.swing.JTextField();
        jVoteUseful = new javax.swing.JLabel();
        jVoteUsefulCombo = new javax.swing.JComboBox();
        jVoteUsefulText = new javax.swing.JTextField();
        jVoteCool = new javax.swing.JLabel();
        jVoteCoolCombo = new javax.swing.JComboBox();
        jVoteCoolText = new javax.swing.JTextField();
        jSearchForUser = new javax.swing.JComboBox();
        jSearchForUserLabel = new javax.swing.JLabel();
        jReviewFromLabel = new javax.swing.JLabel();
        jReviewFrom = new javax.swing.JTextField();
        jReviewToLabel = new javax.swing.JLabel();
        jReviewTo = new javax.swing.JTextField();
        jReviewStarsLabel = new javax.swing.JLabel();
        jReviewStarsCombo = new javax.swing.JComboBox();
        jReviewStarsText = new javax.swing.JTextField();
        jReviewVotesLabel = new javax.swing.JLabel();
        jReviewVotesCombo = new javax.swing.JComboBox();
        jReviewVotesText = new javax.swing.JTextField();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1600, 900));
        setResizable(false);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.setBackground(new java.awt.Color(149, 152, 152));
        jPanel1.setToolTipText("");
        jPanel1.setMaximumSize(new java.awt.Dimension(200, 800));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 800));
        jPanel1.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane2.setViewportView(jPanel1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Business", "City", "State", "Stars"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jScrollPane4.setMaximumSize(new java.awt.Dimension(300, 800));

        jPanel2.setBackground(new java.awt.Color(149, 152, 152)); // Change color
        jPanel2.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane4.setViewportView(jPanel2);

        jScrollPane5.setMaximumSize(new java.awt.Dimension(300, 800));

        jPanel3.setBackground(new java.awt.Color(149, 152, 152));
        jPanel3.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane5.setViewportView(jPanel3);

        jCheckBox1.setText("jCheckBox1");

        jLabel1.setText("jLabel1");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "00:00", "00:30", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30" }));
        jComboBox3.setEnabled(false);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "00:00", "00:30", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30" }));
        jComboBox4.setEnabled(false);

        jToggleButton1.setText("AM");
        jToggleButton1.setActionCommand("PM");
        jToggleButton1.setEnabled(false);

        jToggleButton2.setText("AM");
        jToggleButton2.setEnabled(false);

        //set value search for
        jSearchFor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"AND","OR"}));

        //set value searchforuser
        jSearchForUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"AND","OR"}));

        //set search for
        jSearchForLabel.setText("SEARCH FOR");

        //set searchforuser label
        jSearchForUserLabel.setText("SEARCH FOR USER");

        //set jReviewFromlabel
        jReviewFromLabel.setText("Review From");

        //set jReviewTo
        jReviewToLabel.setText("Review To");

        jLabel2.setText("From");

        jLabel3.setText("To");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NONE", "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" }));

        jLabel4.setText("Day");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("CLEAR");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("CATEGORIES");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("SUB-CATEGORIES");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("ATTRIBUTES");

        jTextField1.setText("jTextField1");

        jLabel8.setText("City");

        jLabel9.setText("State");

        jTextField2.setText("jTextField2");

        jLabel10.setText("PIN");

        jTextField3.setText("jTextField3");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Most Visited");




        //user fields value set.
        jMemberSince.setText("Member Since");
        jMemberSinceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jReviewCount.setText("Review Count");
        jReviewCountCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jNumberOfFriends.setText("Number of Friends");
        jNumberOfFriendsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jAverageStars.setText("Average Stars");
        jAverageStarsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jVoteFunny.setText("Vote Funny");
        jVoteFunnyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jVoteUseful.setText("Vote Useful");
        jVoteUsefulCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jVoteCool.setText("Vote Cool");
        jVoteCoolCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));

        //review to review from vallues set
        jReviewStarsLabel.setText("Stars");
        jReviewStarsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));
        jReviewVotesLabel.setText("Votes");
        jReviewVotesCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"<",">","=","<=",">="}));


        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setAutoscrolls(true);
        jScrollPane6.setEnabled(false);
        jScrollPane6.setHorizontalScrollBar(null);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setFocusable(false);
        jTextArea1.setMaximumSize(new java.awt.Dimension(204, 114));
        jScrollPane6.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        getContentPane().setSize(500,500);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                            .addGroup(layout.createSequentialGroup()
//                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                                                    .addComponent(jCheckBox1)
//                                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                                                    .addGroup(layout.createSequentialGroup()
//                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                                            .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                            .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
//                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
//                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                                                .addComponent(jLabel3)
//                                                .addGap(50, 50, 50)))
//                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                                            .addComponent(jLabel4)
//                                            .addGap(46, 46, 46)))
//                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                                        .addComponent(jLabel2)
//                                        .addGap(40, 40, 40))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField1,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8)
                                                .addComponent(jReviewFromLabel)
                                                .addComponent(jReviewFrom,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewToLabel,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewTo)
                                                .addComponent(jReviewStarsLabel,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewStarsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewStarsText)
                                                .addComponent(jReviewVotesLabel,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewVotesCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jReviewVotesText)
                                        )
                                            //    .addComponent(jReviewFrom,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                .addComponent(jReviewFromLabel)
//                                                .addComponent(jReviewTo,javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                .addComponent(jReviewToLabel)

//                                            .addComponent(jLabel9)
//                                            .addComponent(jLabel10)
//                                            .addComponent(jTextField2)
//                                            .addComponent(jTextField3)
//                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
//                                .addComponent(jLabel11)
                                .addGap(33, 33, 33))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                            .addContainerGap()
                        .addComponent(jLabel6)
                            .addContainerGap()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel7)
                            .addGap(40,40,40)
                            .addComponent(jSearchForLabel)
                            .addGap(10,10,10)
                            .addComponent(jSearchFor,javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                )
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel1))
//                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        //.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
//                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()//member since horizontal ui
                            .addComponent(jMemberSince,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jMemberSinceCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jMemberSinceText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jReviewCount horizontal ui
                            .addComponent(jReviewCount,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jReviewCountCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jReviewCountText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jNumberOfFriends horizontal ui
                            .addComponent(jNumberOfFriends,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jNumberOfFriendsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jNumberOfFriendsText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jAverageStars horizontal ui
                            .addComponent(jAverageStars,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jAverageStarsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jAverageStarsText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jVoteFunny horizontal ui
                            .addComponent(jVoteFunny,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteFunnyCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteFunnyText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jVoteUseful horizontal ui
                            .addComponent(jVoteUseful,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteUsefulCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteUsefulText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jVoteCool horizontal ui
                            .addComponent(jVoteCool,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteCoolCombo,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10,10,10)
                            .addComponent(jVoteCoolText,javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
                    .addGroup(layout.createSequentialGroup()//jsearchforuser horizontal ui
                        .addComponent(jSearchForUserLabel,javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10,10,10)
                        .addComponent(jSearchForUser,javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    )
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            //.addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
//                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                              .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
//                                .addComponent(jLabel2)
//                                .addGap(8, 8, 8)
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addComponent(jToggleButton1))
//                                .addGap(9, 9, 9)
//                                .addComponent(jLabel3)
//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addComponent(jToggleButton2))
//                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                                .addComponent(jLabel4)
//                                .addGap(5, 5, 5)
//                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(185, 185, 185)
//                                .addComponent(jCheckBox1)
//                                .addGap(21, 21, 21)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewFromLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewToLabel)
                                    .addComponent(jReviewTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jReviewStarsLabel,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jReviewStarsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jReviewStarsText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewVotesLabel,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewVotesCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jReviewVotesText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
//                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(70, 70, 70)
//                                .addComponent(jLabel11)
//                                .addGap(15, 15, 15))
//                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                                .addComponent(jSearchForLabel)
                                .addComponent(jSearchFor,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jMemberSince,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jMemberSinceCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jMemberSinceText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jReviewCount,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jReviewCountCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jReviewCountText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jNumberOfFriends,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jNumberOfFriendsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jNumberOfFriendsText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jAverageStars,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAverageStarsCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAverageStarsText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jVoteFunny,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteFunnyCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteFunnyText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jVoteUseful,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteUsefulCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteUsefulText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jVoteCool,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteCoolCombo,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jVoteCoolText,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSearchForUserLabel,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSearchForUser,javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            )
                            .addGap(40,40,40)
                    )

            )
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void initmore() {
        try {
            PreparedStatement statement = null;
            ResultSet rs = null;

            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = null;
            con = DriverManager.getConnection(DBURL, DBUSER, DBPASS);
            statement = con.prepareStatement("SELECT CATEGORY FROM NATIVE_CATEGORY");
            rs = statement.executeQuery();
            //native category is just the initial business category on the first screen
            while (rs.next()) {
                JCheckBox mycheckbox = new JCheckBox();
                mycheckbox.setText(rs.getString("CATEGORY"));
                mycheckbox.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        Object source = e.getItemSelectable();
                        JCheckBox checkbox = (JCheckBox) source;
                        if (e.getStateChange() == ItemEvent.SELECTED) {
                            // the checkbox was just selected
                            System.out.println("selected");
                            System.out.println(checkbox.getText());
                            updateTable(checkbox.getText(), 1, true);
                        } else {
                            // the checkbox was just selected
                            System.out.println("unselected");
                            System.out.println(checkbox.getText());
                            updateTable(checkbox.getText(), 1, false);
                        }
                    }
                });
                jPanel1.add(mycheckbox);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                if (!(all_bids.size() < row)) {
                    setEnabled(false);
                    jTable1.setOpaque(false);
                    SecondJFrame secondFrame = new SecondJFrame(all_bids.get(row), jTable1.getValueAt(row, 0).toString());
                    secondFrame.setVisible(true);
                    setEnabled(true);
                }
            }
        });
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        jTable1.setDefaultRenderer(Object.class, new MyTableCellRender());

        jCheckBox1.setText("Search All");

        jCheckBox1.setVisible(false);
        jLabel1.setVisible(false);

        jToggleButton1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (jToggleButton1.isSelected()) {
                    jToggleButton1.setText("PM");
                } else {
                    jToggleButton1.setText("AM");
                }
            }
        });

        jToggleButton2.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (jToggleButton2.isSelected()) {
                    jToggleButton2.setText("PM");
                } else {
                    jToggleButton2.setText("AM");
                }
            }
        });

        jComboBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jComboBox1.getSelectedIndex() == 0) {
                    jToggleButton1.setEnabled(false);
                    jToggleButton2.setEnabled(false);
                    jComboBox3.setSelectedIndex(0);
                    jComboBox4.setSelectedIndex(0);
                    jComboBox3.setEnabled(false);
                    jComboBox4.setEnabled(false);
                } else {
                    jToggleButton1.setEnabled(true);
                    jToggleButton2.setEnabled(true);
                    jComboBox3.setEnabled(true);
                    jComboBox4.setEnabled(true);
                }
            }
        });

        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTable(null, 4, true);
            }
        });

        jButton2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTable(null, 5, true);
            }
        });

        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");

    }

    public void updateTable(String value, int val, boolean add_or_not) {
        try {
            DefaultTableModel tmodel = new DefaultTableModel();
            jTable1.setModel(tmodel);
            tmodel.addColumn("Business");
            tmodel.addColumn("City");
            tmodel.addColumn("State");
            tmodel.addColumn("Stars");
//            tmodel.addColumn("Chekins");
            ArrayList<String> all_attributes = new ArrayList<String>();
            all_bids.clear();

            PreparedStatement statement = null;
            ResultSet rs = null;
            PreparedStatement statement3 = null;
            ResultSet rs3 = null;

            Class.forName("oracle.jdbc.driver.OracleDriver");
            Connection con = null;
            con = DriverManager.getConnection(DBURL, DBUSER, DBPASS);

            String attrib_string = "0000000000000000000000000000000000000000000"
                    + "000000000000000000000000000000000000000000000000000000000000000";

            jLabel1.setVisible(false);
            if (val == 1) {
                if (add_or_not) {
                    selected_categories.add(value);
                } else {
                    selected_categories.remove(selected_categories.indexOf(value));
                }

                if (selected_categories.size() == 0) {
                    jTable1.removeAll();
                    jPanel2.removeAll();
                    jPanel3.removeAll();
                    pack();
                    validate();
                    repaint();
                    System.out.println("all_gone");
                    jCheckBox1.setVisible(false);
                    return;
                } else {
                    jCheckBox1.setVisible(true);
                }
                selected_sub_categories.clear();
                selected_attributes.clear();
                jPanel2.removeAll();
                jPanel3.removeAll();
            } else if (val == 2) {
                if (add_or_not) {
                    selected_sub_categories.add(value);
                } else {
                    selected_sub_categories.remove(selected_sub_categories.indexOf(value));
                }
                selected_attributes.clear();
                jPanel3.removeAll();
                jPanel2.removeAll();
            } else if (val == 3) {
                if (add_or_not) {
                    selected_attributes.add(value);
                } else {
                    selected_attributes.remove(selected_attributes.indexOf(value));
                }
                jPanel3.removeAll();
            } else if (val == 5) {
                for (Component c : jPanel1.getComponents()) {
                    if (c instanceof JCheckBox) {
                        ((JCheckBox) c).setSelected(false);
                    }
                }
                return;
            } else if (val == 4){
                System.out.println("coming here");
            }

            if (selected_categories.size() == 0) {
                return;
            }

            String statement_text = "SELECT ATTRIB FROM NATIVE_ATTRIBUTE";
            statement = con.prepareStatement(statement_text);
            rs = statement.executeQuery();

            while (rs.next()) {
                all_attributes.add(rs.getString("ATTRIB"));
            }

            statement.close();

            String Combo1 = jComboBox1.getSelectedItem().toString();
            String searchForVal = (jSearchFor.getSelectedItem().toString().equals("AND"))?"INTERSECT":"UNION";

            if (Combo1 == "NONE") {
                Combo1 = "SUNDAY";
            }

            statement_text = "SELECT DISTINCT BUSINESS.BID, BUSINESS.B_OPEN, BUSINESS.CHECKIN, BUSINESS.PIN, BUSINESS." + Combo1 + "_TIME_OPEN, "
                    + "BUSINESS." + Combo1 + "_TIME_CLOSE, "
                    + "BUSINESS.B_NAME, BUSINESS.ATTRIB, BUSINESS.CITY, BUSINESS.STATE_NM, \n"
                    + "BUSINESS.RATING FROM BUSINESS \n"
                    + "WHERE BUSINESS.BID IN( \n"
                    + "SELECT BID FROM BUSINESS_CATEGORY\n"
                    + "WHERE B_CATEGORY=\n"
                    + "'" + formatString(selected_categories.get(0)) + "'";

            if (selected_categories.size() > 0) {
                for (int i = 1; i < selected_categories.size(); i++) {
                    System.out.println(i);
                    statement_text += " " + searchForVal + " SELECT BID FROM BUSINESS_CATEGORY WHERE B_CATEGORY= " + "'" + formatString(selected_categories.get(i)) + "'";
                }
            }
            //fixing subcategories issue.
            if (selected_sub_categories.size() > 0) {
                statement_text += " INTERSECT SELECT BID FROM BUSINESS_SUB_CATEGORY WHERE B_SUB_CATEGORY= " + "'" + formatString(selected_sub_categories.get(0)) + "'";
                for (int i = 1; i < selected_sub_categories.size(); i++) {
                    statement_text += " " + searchForVal + " SELECT BID FROM BUSINESS_SUB_CATEGORY WHERE B_SUB_CATEGORY= " + "'" + formatString(selected_sub_categories.get(i)) + "'";
                }
            }
            statement_text += ")";
            //testing queriesßß
//            System.out.println("Categories text");
//            System.out.println(statement_text);
            statement = con.prepareStatement(statement_text);
            rs = statement.executeQuery();
            StringBuffer buf_all = new StringBuffer(attrib_string);
            int check_how_many = 0;
            String iamthebest = null;
            int best_checkin = -1;
            while (rs.next()) {
                boolean check_the_row = true;
                boolean check_any_row = false;
                String key_attribute = rs.getString("ATTRIB");//doubt: not sure if attrib exists in the returned columns.
                int go_to_length = Integer.min(attrib_string.length(), key_attribute.length());
                StringBuffer buf_me = new StringBuffer(key_attribute);
                for (int i = 0; i < go_to_length; i++) {
                    if (buf_me.charAt(i) == '1') {
                        buf_all.setCharAt(i, '1');
                    }
                }

                Timestamp check_time_open = rs.getTimestamp(Combo1 + "_TIME_OPEN");
                Timestamp check_time_close = rs.getTimestamp(Combo1 + "_TIME_CLOSE");

                boolean check_time = true;
                String check_if_open = rs.getString("B_OPEN");
                if (check_if_open.equals("false")) {
                    check_if_open = "CLOSED: ";
                } else {
                    check_if_open = "";
                }

                if (jComboBox1.getSelectedItem().toString() != "NONE") {
                    check_time = check_time(check_time_open, check_time_close, jComboBox3.getSelectedItem().toString(),
                            jComboBox4.getSelectedItem().toString(), jToggleButton1.isSelected(), jToggleButton2.isSelected());
                    //System.out.println("Completed check_time: " + check_time);
                    if (!check_time) {
                        continue;
                    }
                }

                String my_bid = rs.getString("BID");
                String mycheck = rs.getString("CHECKIN");
                String mychecking = null;
                if (mycheck != null) {
                    int this_day = jComboBox1.getSelectedIndex();
                    if ((this_day > 0) && mycheck.length() > 0) {
                        mychecking = mycheck.split(":")[this_day];
                    }
                }

                boolean check_city = true;
                boolean check_state = true;
                boolean check_pin = true;
                if (jTextField1.getText().length() > 0) {
                    if (!(jTextField1.getText().equals(rs.getString("CITY")))) {
                        check_city = false;
                    }
                }
                if (jTextField2.getText().length() > 0) {
                    if (!(jTextField2.getText().equals(rs.getString("STATE_NM")))) {
                        check_state = false;
                    }
                }
                if (jTextField3.getText().length() > 0) {
                    if (!(jTextField3.getText().equals(rs.getString("PIN")))) {
                        check_pin = false;
                    }
                }
                //System.out.println("check address: " + check_city + check_pin + check_state);
                if (selected_attributes.size() > 0) {
                    for (int i = 0; i < selected_attributes.size(); i++) {
                        for (int j = 0; j < all_attributes.size(); j++) {
                            if (all_attributes.get(j).equals(selected_attributes.get(i))) {
                                //j is what we want
                                if (jCheckBox1.isSelected()) {
                                    if (buf_me.charAt(j) != '1') {
                                        check_the_row = false;
                                    }
                                } else if (buf_me.charAt(j) == '1') {
                                    check_any_row = true;
                                }
                            }
                        }
                    }
                    if (check_city && check_state && check_pin) {
                        if ((jCheckBox1.isSelected() && check_the_row) || ((!jCheckBox1.isSelected()) && check_any_row)) {
                            tmodel.addRow(new Object[]{check_if_open + rs.getString("B_NAME"), rs.getString("CITY"), rs.getString("STATE_NM"), rs.getString("RATING"), mychecking});
                            check_how_many++;
                            all_bids.add(my_bid);
                            if (mychecking != null) {
                                if (best_checkin < Integer.parseInt(mychecking)) {
                                    iamthebest = rs.getString("B_NAME");
                                    best_checkin = Integer.parseInt(mychecking);
                                }
                            }

                        }
                    }
                } else if (check_city && check_state && check_pin) {
                    tmodel.addRow(new Object[]{check_if_open + rs.getString("B_NAME"), rs.getString("CITY"), rs.getString("STATE_NM"), rs.getString("RATING"), mychecking});
                    check_how_many++;
                    all_bids.add(my_bid);
                    if (mychecking != null) {
                        if (best_checkin < Integer.parseInt(mychecking)) {
                            iamthebest = rs.getString("B_NAME");
                            best_checkin = Integer.parseInt(mychecking);
                        }
                    }
                }
            }


            if (iamthebest != null)
                jTextArea1.setText(iamthebest);
            else
                jTextArea1.setText("");

            if (check_how_many > 0) {
                jLabel1.setText("Number of Results" + check_how_many);
                jLabel1.setVisible(true);
            }

            statement.close();
            statement_text = "SELECT ATTRIB FROM (SELECT ROWNUM AS ROW_NUMBER,"
                    + "NATIVE_ATTRIBUTE.* FROM NATIVE_ATTRIBUTE) "
                    + "WHERE ROW_NUMBER = ";
            int check_row = 0;
            for (int i = 0; i < attrib_string.length(); i++) {
                if (buf_all.charAt(i) == '1') {
                    if (check_row == 0) {
                        statement_text += Integer.toString(i + 1);
                    } else {
                        statement_text += " OR ROW_NUMBER = " + Integer.toString(i + 1);
                    }
                    check_row++;
                }
            }
            if ((check_row > 0 &&(val != 4))) {
                statement = con.prepareStatement(statement_text);
                rs = statement.executeQuery();
                while (rs.next()) {
                    JCheckBox mycheckbox = new JCheckBox();
                    String checkbox_string = rs.getString("ATTRIB");
                    mycheckbox.setText(checkbox_string);
                    for (int j = 0; j < selected_attributes.size(); j++) {
                        if (selected_attributes.get(j).equals(checkbox_string)) {
                            mycheckbox.setSelected(true);
                        }
                    }
                    mycheckbox.addItemListener(new ItemListener() {
                        @Override
                        public void itemStateChanged(ItemEvent e) {

                            Object source = e.getItemSelectable();
                            JCheckBox checkbox = (JCheckBox) source;
                            if (e.getStateChange() == ItemEvent.SELECTED) {
                                // the checkbox was just selected
                                //System.out.println("selected");
                                System.out.println(checkbox.getText());
                                updateTable(checkbox.getText(), 3, true);
                            } else {
                                // the checkbox was just selected
                                //System.out.println("unselected");
                                System.out.println(checkbox.getText());
                                updateTable(checkbox.getText(), 3, false);
                            }
                        }
                    });
                    jPanel3.add(mycheckbox);
                    pack();
                }
            }

            statement.close();
            if (val < 3) {
                statement_text = "SELECT DISTINCT BUSINESS_SUB_CATEGORY.B_SUB_CATEGORY "
                        + "FROM BUSINESS_SUB_CATEGORY \n"
                        + "WHERE BUSINESS_SUB_CATEGORY.BID IN(\n"
                        + "SELECT BID FROM BUSINESS_CATEGORY WHERE B_CATEGORY= "
                        + "'" + selected_categories.get(0) + "'";
                if (selected_categories.size() > 1) {
                    for (int i = 1; i < selected_categories.size(); i++) {
                        statement_text += searchForVal + " SELECT BID FROM BUSINESS_CATEGORY WHERE B_CATEGORY= " + "'" + selected_categories.get(i) + "'";
                    }
                }
                statement_text += ")";
                //testing queries
//                System.out.println("Subcategories text");
//                System.out.println(statement_text);
                statement = con.prepareStatement(statement_text);
                rs = statement.executeQuery();

                while (rs.next()) {
                    JCheckBox mycheckbox = new JCheckBox();
                    String checkbox_string = rs.getString("B_SUB_CATEGORY");
                    mycheckbox.setText(checkbox_string);
                    for (int j = 0; j < selected_sub_categories.size(); j++) {
                        if (selected_sub_categories.get(j).equals(checkbox_string)) {
                            mycheckbox.setSelected(true);
                        }
                    }
                    mycheckbox.addItemListener(new ItemListener() {
                        @Override
                        public void itemStateChanged(ItemEvent e) {

                            Object source = e.getItemSelectable();
                            JCheckBox checkbox = (JCheckBox) source;
                            if (e.getStateChange() == ItemEvent.SELECTED) {
                                // the checkbox was just selected
                                System.out.println("selected");
                                System.out.println(checkbox.getText());
                                updateTable(checkbox.getText(), 2, true);
                            } else {
                                // the checkbox was just selected
                                System.out.println("unselected");
                                System.out.println(checkbox.getText());
                                updateTable(checkbox.getText(), 2, false);
                            }
                        }
                    });
                    jPanel2.add(mycheckbox);
                    pack();
                }
            }
            statement.close();
            con.close();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    //updates on user table
    public void updateUserTable(){

    }

    public static String formatString(String str) {
        String strSingleQuotation = "\'||chr(39)||\'";
        StringBuffer strReturn = new StringBuffer();
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == '\'') {
                strReturn.append(strSingleQuotation);
            } else {
                strReturn.append(str.charAt(i));
            }
        }
        return strReturn.toString();
    }

    public static boolean check_time(Timestamp time_open, Timestamp time_close, String open_choice,
                                     String close_choice, boolean check_open, boolean check_close) {

        if ((time_open == null) || (time_close == null)) {
            return false;
        }

        Timestamp choice_ts_open = null;
        Timestamp choice_ts_close = null;

        //System.out.println("My God: " + open_choice + close_choice);

        if (open_choice != "None") {

            int choice_time_open = Integer.parseInt(open_choice.split(":")[0]);

            if (check_open) {
                choice_time_open += 12;
            }

            if (choice_time_open < 10) {
                choice_ts_open = Timestamp.valueOf("0001-01-01 " + "0" + Integer.toString(choice_time_open) + ":" + (open_choice.split(":")[1]) + ":00.0");
            } else {
                choice_ts_open = Timestamp.valueOf("0001-01-01 " + Integer.toString(choice_time_open) + ":" + (open_choice.split(":")[1]) + ":00.0");
            }

            if (!(time_open.equals(Timestamp.valueOf("0001-01-01 00:00:00.0")))) {
                if (!(choice_ts_open.equals(Timestamp.valueOf("0001-01-01 00:00:00.0")))) {
                    if (choice_ts_open.before(time_open)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
        }

        if (close_choice != "None") {

            int choice_time_close = Integer.parseInt(close_choice.split(":")[0]);

            if (check_close) {
                choice_time_close += 12;
            }

            if (choice_time_close < 10) {
                choice_ts_close = Timestamp.valueOf("0001-01-01 " + "0" + Integer.toString(choice_time_close) + ":" + (close_choice.split(":")[1]) + ":00.0");
            } else {
                choice_ts_close = Timestamp.valueOf("0001-01-01 " + Integer.toString(choice_time_close) + ":" + (close_choice.split(":")[1]) + ":00.0");
            }

            if (!(time_close.equals(Timestamp.valueOf("0001-01-01 00:00:00.0")))) {
                if (!(choice_ts_open.equals(Timestamp.valueOf("0001-01-01 00:00:00.0")))) {
                    if (choice_ts_close.after(time_close)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HW3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JComboBox jSearchFor;//declare search for
    private javax.swing.JLabel jSearchForLabel;//declare search label
    //user ui fields decalaration
    private javax.swing.JLabel jMemberSince;
    private javax.swing.JComboBox jMemberSinceCombo;
    private javax.swing.JTextField jMemberSinceText;
    private javax.swing.JLabel jReviewCount;
    private javax.swing.JComboBox jReviewCountCombo;
    private javax.swing.JTextField jReviewCountText;
    private javax.swing.JLabel jNumberOfFriends;
    private javax.swing.JComboBox jNumberOfFriendsCombo;
    private javax.swing.JTextField jNumberOfFriendsText;
    private javax.swing.JLabel jAverageStars;
    private javax.swing.JComboBox jAverageStarsCombo;
    private javax.swing.JTextField jAverageStarsText;
    private javax.swing.JLabel jVoteFunny;
    private javax.swing.JComboBox jVoteFunnyCombo;
    private javax.swing.JTextField jVoteFunnyText;
    private javax.swing.JLabel jVoteUseful;
    private javax.swing.JComboBox jVoteUsefulCombo;
    private javax.swing.JTextField jVoteUsefulText;
    private javax.swing.JLabel jVoteCool;
    private javax.swing.JComboBox jVoteCoolCombo;
    private javax.swing.JTextField jVoteCoolText;
    private javax.swing.JComboBox jSearchForUser;
    private javax.swing.JLabel jSearchForUserLabel;
    private javax.swing.JLabel jReviewFromLabel;
    private javax.swing.JTextField jReviewFrom;
    private javax.swing.JLabel jReviewToLabel;
    private javax.swing.JTextField jReviewTo;
    private javax.swing.JLabel jReviewStarsLabel;
    private javax.swing.JComboBox jReviewStarsCombo;
    private javax.swing.JTextField jReviewStarsText;
    private javax.swing.JLabel jReviewVotesLabel;
    private javax.swing.JComboBox jReviewVotesCombo;
    private javax.swing.JTextField jReviewVotesText;


    // End of variables declaration//GEN-END:variables
}

class MyTableCellRender extends DefaultTableCellRenderer {

    public MyTableCellRender() {
        setOpaque(true);
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

        String Number = (String) value;

        setForeground(Color.black);
        setBackground(Color.white);
        if (Number != null) {
            if (Number.contains("CLOSED")) {
                setForeground(Color.white);
                setBackground(Color.red);
            }
        }

        setText(value != null ? value.toString() : "");
        return this;
    }
}
